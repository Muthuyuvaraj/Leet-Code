class Solution:
    def maxSumOfThreeSubarrays(self, nums, k):
        n = len(nums)
        subarray_sum = [0] * (n - k + 1)
        subarray_sum[0] = sum(nums[:k])
        for i in range(1, n - k + 1):
            subarray_sum[i] = subarray_sum[i - 1] - nums[i - 1] + nums[i + k - 1]
        left = [0] * (n - k + 1)
        best_left = 0
        for i in range(n - k + 1):
            if subarray_sum[i] > subarray_sum[best_left]:
                best_left = i
            left[i] = best_left
        right = [0] * (n - k + 1)
        best_right = n - k
        for i in range(n - k, -1, -1):
            if subarray_sum[i] >= subarray_sum[best_right]:
                best_right = i
            right[i] = best_right
        max_sum = 0
        result = []
        for mid in range(k, n - 2 * k + 1):
            left_index = left[mid - k]
            right_index = right[mid + k]
            current_sum = subarray_sum[left_index] + subarray_sum[mid] + subarray_sum[right_index]
            if current_sum > max_sum:
                max_sum = current_sum
                result = [left_index, mid, right_index]
        return result
--------------------------------------------------------------------------------------------------------------


Steps in the Code
Calculate Subarray Sums:

We first compute the sum of every subarray of length k in nums and store it in an array subarray_sum.
Example:
python
Copy code
nums = [1, 2, 1, 2, 6, 7, 5, 1], k = 2
subarray_sum = [3, 3, 3, 8, 13, 12, 6]
Explanation: The first subarray sum is 
1
+
2
=
3
1+2=3, the next is 
2
+
1
=
3
2+1=3, and so on.
Track Best Left Subarray:

Use an array left to store the index of the best subarray (max sum) from the start up to each position.
Example:
python
Copy code
left = [0, 0, 0, 3, 4, 4, 4]
Explanation:
For position 3, the best left subarray is at index 3 because its sum is 
8
8.
For position 4, the best left subarray is at index 4 because its sum is 
13
13.
Track Best Right Subarray:

Use an array right to store the index of the best subarray (max sum) from each position to the end.
Example:
python
Copy code
right = [4, 4, 4, 4, 4, 5, 6]
Explanation:
For position 4, the best right subarray is at index 4 because its sum is 
13
13.
For position 5, the best right subarray is at index 5 because its sum is 
12
12.
Iterate Over Mid Subarrays:

Iterate over all possible positions for the middle subarray (mid) and compute the total sum of the three subarrays:
left_index: Best subarray on the left (from left array).
mid: Current subarray.
right_index: Best subarray on the right (from right array).
Keep track of the maximum sum and corresponding indices.
Return the Result:

Return the indices of the three subarrays that give the maximum sum.

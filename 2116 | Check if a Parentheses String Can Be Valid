class Solution:
    def canBeValid(self, s: str, locked: str) -> bool:
        n = len(s)
        if n % 2 != 0:
            return False
        open_min, open_max = 0, 0  
        for i in range(n):
            if locked[i] == '1':
                if s[i] == '(':
                    open_min += 1
                    open_max += 1
                else:
                    open_min -= 1
                    open_max -= 1
            else:  
                open_min -= 1
                open_max += 1
            open_min = max(open_min, 0)
            if open_max < 0:
                return False
        open_min, open_max = 0, 0
        for i in range(n - 1, -1, -1):
            if locked[i] == '1':
                if s[i] == ')':
                    open_min += 1
                    open_max += 1
                else:
                    open_min -= 1
                    open_max -= 1
            else:  
                open_min -= 1
                open_max += 1
            open_min = max(open_min, 0)
            if open_max < 0:
                return False

        return True


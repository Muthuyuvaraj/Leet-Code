from collections import defaultdict

class Solution:
    def largestIsland(self, grid):
        n = len(grid)
        island_id = 2 
        island_sizes = {0: 0}  
        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]  
        
        # DFS function to calculate island size
        def dfs(r, c, island_id):
            if r < 0 or c < 0 or r >= n or c >= n or grid[r][c] != 1:
                return 0
            grid[r][c] = island_id  
            size = 1
            for dr, dc in directions:
                size += dfs(r + dr, c + dc, island_id)
            return size
        
        # Step 1: Identify islands and their sizes
        for r in range(n):
            for c in range(n):
                if grid[r][c] == 1:
                    island_sizes[island_id] = dfs(r, c, island_id)
                    island_id += 1
        
        # Step 2: Check for the largest possible island by flipping one zero
        max_island = max(island_sizes.values())  
        
        for r in range(n):
            for c in range(n):
                if grid[r][c] == 0:  
                    unique_islands = set()
                    for dr, dc in directions:
                        nr, nc = r + dr, c + dc
                        if 0 <= nr < n and 0 <= nc < n and grid[nr][nc] > 1:
                            unique_islands.add(grid[nr][nc])
                    
                    new_size = 1 + sum(island_sizes[i] for i in unique_islands)
                    max_island = max(max_island, new_size)
        
        return max_island

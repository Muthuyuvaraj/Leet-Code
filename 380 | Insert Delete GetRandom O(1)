import random

class RandomizedSet:
    def __init__(self):
        self.val_to_index = {}
        self.values = []
    def insert(self, val: int) -> bool:
        if val in self.val_to_index:
            return False
        self.val_to_index[val] = len(self.values)
        self.values.append(val)
        return True
    def remove(self, val: int) -> bool:
        if val not in self.val_to_index:
            return False
        idx = self.val_to_index[val]
        last_val = self.values[-1]
        self.values[idx] = last_val
        self.val_to_index[last_val] = idx
        self.values.pop()
        del self.val_to_index[val]
        return True
    def getRandom(self) -> int:
        return random.choice(self.values)
----------------------------------------------------
"Explanation:
Data Structures:
A list (self.values) to store the elements for 
𝑂(1)
O(1) access when getting a random element.
A dictionary (self.val_to_index) to store the index of each value in the list for 
𝑂(1)
O(1) insert and remove operations.
Insert:
Check if the value already exists in val_to_index. If it does, return False.
Otherwise, add the value to the end of values and update val_to_index with the index of the newly added value.
Remove:
If the value does not exist in val_to_index, return False.
Otherwise, swap the value to be removed with the last value in values and update val_to_index for the swapped value.
Remove the last element from values and delete the entry from val_to_index.
GetRandom:
Use random.choice to select and return a random element from values."

class Solution:
    def countGoodStrings(self, low: int, high: int, zero: int, one: int) -> int:
        mod = 10**9 + 7
        dp = [0]*(high+1)
        dp[0] = 1

        for i in range(1, (high+1)):
            if i >= zero:
                dp[i] += dp[i - zero]
            if i >= one:
                dp[i] += dp[i - one]
            dp[i] %=  mod
        return sum(dp[low:high+1]) % mod
        
--------------------------------------------------------------------------------------------------------

Explanation of the Code
Initialization: Start with dp[0] = 1, as there's exactly one way to construct an empty string.
DP Calculation: For each length i from 1 to high:
Add the ways to construct a string by appending '0' or '1'.
Final Answer: Sum up the values of dp[i] for all 
ùëñ
i between low and high.
Complexity
